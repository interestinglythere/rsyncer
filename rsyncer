#!/usr/bin/env python

# Python 2.6+ & 3 compatibility (untested with Python 3 as of yet)
from __future__ import print_function
if hasattr(__builtins__, 'raw_input'): input = __builtins__.raw_input

# Options
CONFIG_DIR = "~/.config/rsyncer"
DEFAULT_CONFIG = {
	'rsync-single': 'rvut',
	'rsync-double': [],
	'rsync-path': None,
	'exclude-from': None,
	'local': None,
	'remote': None
}

# system #

def printe(*objects, **kwargs):
	from sys import stderr
	print(*objects, file=stderr, **kwargs)

def add_sigint_support():
	# An attempt to add Windows support for ^C. Doesn't work though.
	# from http://stackoverflow.com/a/1112363
	from signal import signal, SIGINT
	def raiseKeyboardInterrupt(signum, frame): raise KeyboardInterrupt()
	signal(SIGINT, raiseKeyboardInterrupt)

def add_timelimit_support():
	# from http://stackoverflow.com/a/4033997/782045
	from signal import signal, SIGALRM
	def raiseAlarmInterrupt(signum, frame): raise AlarmInterrupt()
	signal(SIGALRM, raiseAlarmInterrupt)

# config #

def make_config_dir():
	from os import makedirs
	from os.path import expanduser
	makedirs(expanduser(CONFIG_DIR))

def get_config_filename(name):
	from os.path import expanduser, join
	return join(expanduser(CONFIG_DIR), name+'.json')

def get_main_config():
	from json import loads
	from os.path import exists
	config_filename = get_config_filename('main')
	if not exists(config_filename): return
	with open(config_filename) as f:
		try:
			return loads(f.read())
		except ValueError, exc:
			msg = 'Error parsing %s:\n %s' % (config_filename, exc)
			raise ConfigParseException(msg, config_filename, exc)

def get_config(name, main_config):
	from json import loads
	config_filename = get_config_filename(name)
	if main_config.has_key(name):
		config_nondefault = main_config[name]
	else:
		with open(config_filename) as f:
			try:
				config_nondefault = loads(f.read())
			except ValueError, exc:
				msg = 'Error parsing %s:\n %s' % (config_filename, exc)
				raise ConfigParseException(msg, config_filename, exc)
	if config_nondefault.has_key('extends'):
		config = get_config(config_nondefault['extends'], main_config)
	else:
		config = dict(DEFAULT_CONFIG)
	config.update(config_nondefault)
	return config

# main #

def main():
	add_sigint_support()
	add_timelimit_support()

	from sys import argv, exit

	try:
		if len(argv) != 3:
			printe("usage: %s <config> <command>" % argv[0])
			exit(1)
		main_config = get_main_config()
		config_name = argv[1]
		config = get_config(config_name, main_config)
		command_name = argv[2]
		if not COMMANDS.has_key(command_name):
			raise CommandNotAvailableException('%r is not a valid command' % command_name, command_name)
		command = COMMANDS[command_name](config)
		command.run()
		exit(command.returncode)

	except RsyncerException, exc:
		printe(exc)
	except KeyboardInterrupt:
		printe()
	except EOFError:
		printe()

# programs #

class Program:
	def __init__(self, args, config):
		self.init_program(args, config)

	def init_program(self, args, config):
		self.command = args
		self.config = config
		self.returncode = None

	def run(self):
		from subprocess import Popen
		try:
			printe(' '.join([arg if arg.find(' ') == -1 else "'"+arg+"'" for arg in self.command]))
			process = Popen(self.command, universal_newlines=True)
			process.wait()
		finally:
			try:
				if process.returncode is None: process.kill()
			except (OSError, NameError): pass
		self.returncode = process.returncode

	def append_from_config(self, key, *args, **kwargs):
		self.append(self.get_key(key), *args, **kwargs)

	def append(self, val, prefix='', suffix='', prefix_arg=None, suffix_arg=None, quote_val=False):
		if val: 
			if quote_val: val = '"' + val.replace('"', '\\"') + '"'
			if prefix_arg: self.command.append(prefix_arg)
			self.command.append(prefix + val + suffix)
			if suffix_arg: self.command.append(suffix_arg)

	def check_key(self, key):
		if not self.config[key]:
			raise MissingConfigKeyException('configuration option %r is unset' %key, key)

	def get_key(self, key, required=False):
		if required: self.check_key(key)
		return self.replace_config_vars(key)

	def replace_config_vars(self, key, tried=None):
		if not self.config[key]: return self.config[key]
		if tried == None: tried = []
		elif key in tried: raise ValueError('the following options reference each other: ' + ', '.join(tried))
		tried.append(key)
		from os.path import expanduser
		string = self.config[key]
		for var in self.config:
			search = '$'+var
			if string.find(search) != -1:
				string = string.replace(search, self.replace_config_vars(var, tried))
		string = string.replace('\\$', '$').replace('\\\\', '\\')
		return expanduser(string)


class Rsync(Program):
	def __init__(self, config):
		self.init_rsync(config)

	def init_rsync(self, config):
		self.init_program(['rsync'], config)
		self.check_key('local')
		self.check_key('remote')
		self.append_from_config('rsync-single', prefix='-')
		self.append_from_config('rsync-path', prefix_arg='--rsync-path')
		self.append_from_config('exclude-from', prefix_arg='--exclude-from')
		for arg in self.get_key('rsync-double'): self.append(arg)

	def get_remote(self): return self.get_key('remote', required=True)
	def get_local(self): return self.get_key('local', required=True)

class Push(Rsync):
	def __init__(self, config):
		self.init_rsync(config)
		self.append(self.get_local() + '/')
		self.append(self.get_remote())

class Pull(Rsync):
	def __init__(self, config):
		self.init_rsync(config)
		self.append(self.get_remote() + '/')
		self.append(self.get_local())

class Ssh(Program):
	def __init__(self, config):
		self.init_program(['ssh'], config)
		self.append_from_config('host')

class Pwd(Program):
	def __init__(self, config):
		Program.__init__(self, None, config)

	def run(self):
		print(self.get_key('local'))
		self.returncode = 0

COMMANDS = {
	'ssh': Ssh,
	'push': Push,
	'pull': Pull,
	'pwd': Pwd,
}

# exceptions #

class RsyncerException(Exception): pass	

class CommandNotAvailableException(RsyncerException):
	def __init__(self, msg, command_name):
		self.command_name = command_name
		Exception.__init__(self, msg)

class MissingConfigKeyException(RsyncerException):
	def __init__(self, msg, missing_key):
		self.missing_key = missing_key
		Exception.__init__(self, msg)

class ConfigParseException(RsyncerException):
	def __init__(self, msg, config_filename, orig_exc):
		self.config_filename = config_filename
		self.orig_exc = orig_exc
		Exception.__init__(self, msg)

class AlarmInterrupt(Exception): pass

if __name__ == "__main__": main()
