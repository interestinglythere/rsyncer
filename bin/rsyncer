#!/usr/bin/env python

# Python 2.6+ & 3 compatibility (works with both)
from __future__ import print_function
if hasattr(__builtins__, 'raw_input'): input = __builtins__.raw_input

# Options
CONFIG_DIR = "~/.config/rsyncer"
BUILTIN_DEFAULT_CONFIG = {
	'rsync-opts': 'rvut',
	'rsync-args': [None],
	'ssh-args': [None],
	'rsync-path': None,
	'exclude-from': None,
	'local': None,
	'remote': None,
	'command': 'ssh'
}

# system #

def printe(*objects, **kwargs):
	from sys import stderr
	print(*objects, file=stderr, **kwargs)

def add_sigint_support():
	# An attempt to add Windows support for ^C. Doesn't work though.
	# from http://stackoverflow.com/a/1112363
	from signal import signal, SIGINT
	def raiseKeyboardInterrupt(signum, frame): raise KeyboardInterrupt()
	signal(SIGINT, raiseKeyboardInterrupt)

def add_timelimit_support():
	# from http://stackoverflow.com/a/4033997/782045
	from signal import signal, SIGALRM
	def raiseAlarmInterrupt(signum, frame): raise AlarmInterrupt()
	signal(SIGALRM, raiseAlarmInterrupt)

# config #

def make_config_dir():
	from os import makedirs
	from os.path import expanduser
	makedirs(expanduser(CONFIG_DIR))

def get_config_filename(name):
	from os.path import expanduser, join
	return join(expanduser(CONFIG_DIR), name+'.yaml')

def get_main_config():
	from yaml import load
	from os.path import exists
	config_filename = get_config_filename('hosts')
	if not exists(config_filename): return
	with open(config_filename) as f:
		try:
			return load(f)
		except ValueError as exc:
			msg = 'Error parsing %s:\n %s' % (config_filename, exc)
			raise ConfigParseError(msg, config_filename, exc)

def get_config(name, main_config, tried=None, optional=False, use_default=True):

	if tried is None: tried = []
	elif name in tried:
		raise CircularReferenceError('the following configurations reference each other: ' + ', '.join(tried))
	tried.append(name)

	if name in main_config:
		config_user = main_config[name]
	elif optional:
		return None
	else:
		raise RsyncerError('configuration %r is not defined' % str(name))
	if 'extends' in config_user:
		config = get_config(config_user['extends'], main_config, tried)
	else:
		config = BUILTIN_DEFAULT_CONFIG.copy()
		if use_default:
			config_default = get_config('default', main_config, tried, optional=True, use_default=False)
			if config_default:
				update_config(config, config_default)
			else:
				pass
				# printe('warning: no default config')
	update_config(config, config_user)
	return config

def update_config(config0, config1):
	for key in config1:
		val1 = config1[key]
		if key not in config0:
			config0[key] = val1
			continue
		val0 = config0[key]
		if type(val0) == list and type(val1) == list:
			if len(val1) > 0:
				if val1[0] is None: config0[key] = val1
				else: config0[key] += val1
			continue
		config0[key] = val1



# main #

def main():
	add_sigint_support()
	add_timelimit_support()

	from sys import argv, exit

	try:
		if len(argv) < 2:
			printe("usage: %s config [command [options]]" % argv[0])
			exit(1)
		main_config = get_main_config()
		config_name = argv[1]
		config = get_config(config_name, main_config)
		command_name = argv[2] if len(argv) > 2 else config['command']
		config['_options'] = argv[3:] if len(argv) > 3 else []
		if command_name not in COMMANDS:
			raise CommandNotAvailableError('%r is not a valid command' % command_name, command_name)
		try:
			command = COMMANDS[command_name](config)
		except MissingConfigKeyError as exc:
			raise CommandNotAvailableError('command %r not available because %s' % (command_name, exc), command_name)
		command.run()
		exit(command.returncode)

	except RsyncerError as exc:
		printe('error:', exc)
	except KeyboardInterrupt:
		printe()
	except EOFError:
		printe()

# programs #


class programs:

	class generic:
		def __init__(self, args, config):
			self.init_program(args, config)

		def init_program(self, args, config):
			self.command = args
			self.config = config
			self.returncode = None

		def run(self):
			from subprocess import Popen
			try:
				printe(' '.join(["'"+arg+"'" if ' ' in arg else arg for arg in self.command]))
				process = Popen(self.command, universal_newlines=True)
				process.wait()
			finally:
				try:
					if process.returncode is None: process.kill()
				except (OSError, NameError): pass
			self.returncode = process.returncode

		def append_from_config(self, key, *args, **kwargs):
			self.append(self.get_key(key), *args, **kwargs)

		def append(self, val, prefix='', suffix='', prefix_arg=None, suffix_arg=None, quote_val=False):
			if val: 
				if quote_val: val = '"' + val.replace('"', '\\"') + '"'
				if prefix_arg: self.command.append(prefix_arg)
				self.command.append(prefix + val + suffix)
				if suffix_arg: self.command.append(suffix_arg)

		def check_key(self, key):
			if not self.config[key]:
				raise MissingConfigKeyError('configuration option %r is unset' %key, key)

		def get_key(self, key, required=False):
			if required: self.check_key(key)
			return self.replace_config_vars(key)

		def replace_config_vars(self, key, tried=None):
			val = self.config[key]
			if not val or type(val) == list: return val

			if tried is None: tried = []
			elif key in tried: raise CircularReferenceError('the following options reference each other: ' + ', '.join(tried))
			tried.append(key)

			from os.path import expanduser
			# start matching from the longest strings possible
			# by iterating vars in reverse order
			vars = list(self.config.keys()); vars.sort()
			for var in reversed(vars):
				search = '$'+var
				if val.find(search) != -1:
					val = val.replace(search, self.replace_config_vars(var, tried))
			val = expanduser(val)
			val = val.replace('$', '$\\').replace('\\~', '~').replace('\\\\', '\\')
			return val

	class rsync(generic):
		def __init__(self, config):
			self.init_rsync(config)

		def init_rsync(self, config):
			self.init_program(['rsync'], config)
			self.check_key('local')
			self.check_key('remote')
			self.append_from_config('rsync-opts', prefix='-')
			self.append_from_config('rsync-path', prefix_arg='--rsync-path')
			self.append_from_config('exclude-from', prefix_arg='--exclude-from')
			for arg in self.get_key('rsync-args'): self.append(arg)
			for arg in self.get_key('_options'): self.append(arg)

		def get_remote(self): return self.get_key('remote', required=True)
		def get_local(self): return self.get_key('local', required=True)

	class push(rsync):
		def __init__(self, config):
			self.init_rsync(config)
			if 'disable-push' in config and config['disable-push']:
				raise CommandNotAvailableError('pushing disabled by configuration', 'push')
			self.append(self.get_local() + '/')
			self.append(self.get_remote())

	class pull(rsync):
		def __init__(self, config):
			self.init_rsync(config)
			if 'disable-pull' in config and config['disable-pull']:
				raise CommandNotAvailableError('pulling disabled by configuration', 'pull')
			self.append(self.get_remote() + '/')
			self.append(self.get_local())

	class ssh(generic):
		def __init__(self, config):
			self.init_program(['ssh'], config)
			self.append_from_config('host')
			for arg in self.get_key('ssh-args'): self.append(arg)
			for arg in self.get_key('_options'): self.append(arg)

	class pwd(generic):
		def __init__(self, config):
			self.init_program(None, config)

		def run(self):
			print(self.get_key('local'))
			self.returncode = 0

COMMANDS = {
	'ssh': programs.ssh,
	'push': programs.push,
	'pull': programs.pull,
	'pwd': programs.pwd,
}

# exceptions #

class RsyncerError(Exception): pass

class CircularReferenceError(RsyncerError): pass

class CommandNotAvailableError(RsyncerError):
	def __init__(self, msg, command_name):
		self.command_name = command_name
		Exception.__init__(self, msg)

class MissingConfigKeyError(RsyncerError):
	def __init__(self, msg, missing_key):
		self.missing_key = missing_key
		Exception.__init__(self, msg)

class ConfigParseError(RsyncerError):
	def __init__(self, msg, config_filename, orig_exc):
		self.config_filename = config_filename
		self.orig_exc = orig_exc
		Exception.__init__(self, msg)

class AlarmInterrupt(Exception): pass

if __name__ == "__main__": main()
